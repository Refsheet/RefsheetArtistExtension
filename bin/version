#!/usr/bin/env node
const { start } = require('./lib/common.js');
const pkg = require('../package.json');
const fs = require('fs');
const path = require('path');

async function main(argv) {
    const packageVersion = pkg.version;
    let version = packageVersion;
    let bumpMinor = true;

    if (argv[0] === "get") {
        console.log(packageVersion);
        process.exit(0);
    }

    if (argv.length > 0 && argv[0].match(/^\d+(\.\d+){1,2}/)) {
        version = argv.shift();
        bumpMinor = false;
    }

    version = version.split('.').map(i => parseInt(i));

    // Bump Minor
    if (bumpMinor) {
        if(!version[2]) version[2] = 0;
        version[2] += 1;
    }

    const versionStr = version.join('.');

    if (argv[0] === "set") {
        updatePackage(versionStr, false);
        updateManifest(versionStr, false);
        hardcodeVersion(versionStr, false);
    }

    console.log(versionStr);
}

function updatePackage(version, bak=true) {
    pkg.version = version;
    const pkgJson = JSON.stringify(pkg, null, 2);
    if (bak) fs.copyFileSync("package.json", "package.json.bak");
    fs.writeFileSync("package.json", pkgJson);
}

function updateManifest(version, bak=true) {
    const file = path.join("src", "CSXS", "manifest.xml");
    let data = fs.readFileSync(file).toString();

    data = data.replace(/ExtensionBundleVersion=".*?"/, `ExtensionBundleVersion="${version}"`);
    data = data.replace(/<Extension Id="net\.refsheet\.artist\.extension\.extension1" Version=".*?" \/>/,
        `<Extension Id="net.refsheet.artist.extension.extension1" Version="${version}" />`)

    if (bak) fs.copyFileSync(file, file + ".bak");
    fs.writeFileSync(file, data);
}

function hardcodeVersion(version, bak=true) {
    const file = path.join("src", "ext.js");
    let data = fs.readFileSync(file).toString();

    data = data.replace(/var\s+VERSION\s*=\s*".*?"/, `var VERSION = "${version}"`);

    if (bak) fs.copyFileSync(file, file + ".bak");
    fs.writeFileSync(file, data);
}

start(main);